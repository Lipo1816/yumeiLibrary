@namespace CommonLibraryP.MachinePKG.Component

@rendermode RenderMode.InteractiveServer
@inject IStringLocalizer<MachineLanguage> localizer
@inject MachineService machineService

@implements IDisposable

<DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
    <Rows>
        <DxGridLayoutRow></DxGridLayoutRow>
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="6fr"></DxGridLayoutColumn>
        <DxGridLayoutColumn Width="6fr"></DxGridLayoutColumn>
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div>
                    <DxGrid @ref="@conditionGrid" Data="@allConditions" FocusedRowEnabled="true" FocusedRowChanged="ConditionSelected" DataItemDeleting="DeleteCondition" HighlightRowOnHover="true">
                        <ToolbarTemplate>
                            <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <Items>
                                    <DxToolbarItem IconCssClass="oi oi-plus" Click="NewConditionClicked" BeginGroup="true" />
                                    <DxToolbarItem Enabled="@conditionSelected" Click="ShowConditionPopup" IconCssClass="oi oi-pencil" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                    <DxToolbarItem Enabled="@conditionSelected" Click="ShowConditionDelete" IconCssClass="oi oi-trash" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn Caption="@($"{localizer["Name"]}")" FieldName="@nameof(Condition.Name)" />
                            <DxGridDataColumn Caption="@($"{localizer["Enable"]}")" FieldName="@nameof(Condition.Enable)">
                                <CellDisplayTemplate>
                                    <DxCheckBox CheckType="CheckType.Switch" ReadOnly="true" Checked="@((bool)context.Value)" />
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                            <DxGridDataColumn Caption="@($"{localizer["NodesValid"]}")" FieldName="@nameof(Condition.NodesValid)">
                                <CellDisplayTemplate>
                                    <DxCheckBox CheckType="CheckType.Switch" ReadOnly="true" Checked="@((bool)context.Value)" />
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="0" Column="1">
            <Template>
                <div>
                    <DxTabs>
                        <DxTabPage Text="Syntax tree">
                            <DxTreeList @ref="conditionNodeGrid"
                                        Data="@hierarchicalConditionNodes"
                                        KeyFieldName="@nameof(ConditionNode.Id)"
                                        ChildrenFieldName="@(nameof(ConditionNode.ChildNodes))"
                                        VirtualScrollingEnabled="true"
                                        ColumnResizeMode="TreeListColumnResizeMode.NextColumn"
                                        FocusedRowEnabled="true"
                                        FocusedRowChanged="ConditionNodeSelected"
                                        DataItemDeleting="DeleteConditionNode">
                                <ToolbarTemplate>
                                    <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                        <Items>
                                            <DxToolbarItem BeginGroup="true" IconCssClass="oi oi-plus">
                                                <Items>
                                                    <DxToolbarItem Text="Condition" Click="(()=> NewConditionNodeClicked(0))" />
                                                    <DxToolbarItem Text="Constant" Click="(()=> NewConditionNodeClicked(1))" />
                                                    <DxToolbarItem Text="TagVariable" Click="(()=> NewConditionNodeClicked(2))" />
                                                </Items>
                                            </DxToolbarItem>
                                            <DxToolbarItem Click="ShowNodePopup" Visible="@conditionNodeSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" IconCssClass="oi oi-pencil" />
                                            <DxToolbarItem Click="ShowConditionNodeDelete" Enabled="@conditionNodeSelected" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" IconCssClass="oi oi-trash" Alignment="ToolbarItemAlignment.Right" />
                                        </Items>
                                    </DxToolbar>
                                </ToolbarTemplate>
                                <Columns>
                                    <DxTreeListDataColumn FieldName="@nameof(ConditionNode.NameAndContent)" SortOrder="TreeListColumnSortOrder.Ascending" />
                                    <DxTreeListDataColumn FieldName="@nameof(ConditionNode.AllValid)" SortOrder="TreeListColumnSortOrder.Ascending" />
                                    <DxTreeListDataColumn FieldName="@nameof(ConditionNode.ContentValid)" SortOrder="TreeListColumnSortOrder.Ascending" />
                                </Columns>
                            </DxTreeList>
                        </DxTabPage>
                        <DxTabPage Text="Actions">
                            <DxGrid @ref="@actionGrid" Data="@conditionActions" FocusedRowEnabled="true" FocusedRowChanged="ConditionActionSelected" DataItemDeleting="DeleteConditionAction" HighlightRowOnHover="true">
                                <ToolbarTemplate>
                                    <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                        <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                            <Items>
                                                <DxToolbarItem BeginGroup="true" IconCssClass="oi oi-plus">
                                                    <Items>
                                                        <DxToolbarItem Text="Await" Click="(()=> NewConditionActionClicked(0))" />
                                                        <DxToolbarItem Text="Set Tag" Click="(()=> NewConditionActionClicked(1))" />
                                                    </Items>
                                                </DxToolbarItem>
                                                <DxToolbarItem Click="ShowActionPopup" Visible="@conditionActionSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" IconCssClass="oi oi-pencil" />
                                                <DxToolbarItem Click="ShowConditionActionDelete" Enabled="@conditionActionSelected" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" IconCssClass="oi oi-trash" Alignment="ToolbarItemAlignment.Right" />
                                            </Items>
                                        </DxToolbar>
                                    </DxToolbar>
                                </ToolbarTemplate>
                                <Columns>
                                    <DxGridDataColumn Caption="@($"{localizer["Name"]}")" FieldName="@nameof(ConditionAction.Name)" />
                                    <DxGridDataColumn Caption="@($"{localizer["Command"]}")" FieldName="@nameof(ConditionAction.CommandCode)">
                                        <CellDisplayTemplate>
                                            <div>@(((ConditionCommandCode)context.Value).ToString())</div>
                                        </CellDisplayTemplate>
                                    </DxGridDataColumn>
                                </Columns>
                            </DxGrid>
                        </DxTabPage>
                    </DxTabs>

                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

<DxPopup @bind-Visible="@conditionPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseConditionPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetCondition" Context="ConditionContext" OnValidSubmit="UpsertCondition">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetCondition.Name" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Enable"]}")" ColSpanLg="6">
                    <DxCheckBox @bind-Checked="@targetCondition.Enable" CheckType="CheckType.Switch" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@conditionNodePopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseNodePopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetConditionNode" Context="ConditionNodeContext" OnValidSubmit="UpsertConditionNode">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetConditionNode.Name" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Parent Node"]}")" ColSpanLg="6" BeginRow="true">
                    <DxComboBox @bind-Value="@targetConditionNode.ParentNodeId" Data="@flatConditionNodes" ValueFieldName="@nameof(ConditionNode.Id)" TextFieldName="@nameof(ConditionNode.NameAndContent)" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                @if (targetConditionNode?.GetType() == typeof(ConditionLogicNode))
                {
                    ConditionLogicNode conditionLogicNode = targetConditionNode as ConditionLogicNode;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Logic"]}")" ColSpanLg="6" BeginRow="true">
                        <DxComboBox @bind-Value="@conditionLogicNode.LogicalOperation" Data="@MachineTypeEnumHelper.LogicalOperationWrapperClassDict" ValueFieldName="@nameof(LogicalOperationWrapperClass.Index)" TextFieldName="@nameof(LogicalOperationWrapperClass.Symbol)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }
                else if (targetConditionNode?.GetType() == typeof(ConditionConstDataNode))
                {
                    ConditionConstDataNode conditionConstDataNode = targetConditionNode as ConditionConstDataNode;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Value"]}")" ColSpanLg="6" BeginRow="true">
                        <DxTextBox @bind-Text="@conditionConstDataNode.Value"></DxTextBox>
                    </DxFormLayoutItem>
                }
                else if (targetConditionNode?.GetType() == typeof(ConditionTagDataNode))
                {
                    ConditionTagDataNode conditionTagDataNode = targetConditionNode as ConditionTagDataNode;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target Machine"]}")" ColSpanLg="6" BeginRow="true">
                        <DxComboBox @bind-Value="@conditionTagDataNode.TargetMachineId" Data="@machines" ValueFieldName="@nameof(Machine.Id)" TextFieldName="@nameof(Machine.Name)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target Tag"]}")" ColSpanLg="6" BeginRow="true">
                        <DxComboBox @bind-Value="@conditionTagDataNode.TargetTagId" Data="@machineService.GetMachineByID(conditionTagDataNode?.TargetMachineId)?.TagCategory?.Tags" ValueFieldName="@nameof(Tag.Id)" TextFieldName="@nameof(Tag.Name)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@conditionActionPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseActionPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetConditionAction" Context="ConditionNodeContext" OnValidSubmit="UpsertConditionAction">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetConditionAction.Name" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Parent Node"]}")" ColSpanLg="6" BeginRow="true">
                    <DxComboBox @bind-Value="@targetConditionAction.CommandCode" Data="@MachineTypeEnumHelper.ConditionCommandCodeWrapperClassDict" ReadOnly="true" ValueFieldName="@nameof(ConditionCommandCodeWrapperClass.Index)" TextFieldName="@nameof(ConditionCommandCodeWrapperClass.DisplayName)" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Sequence"]}")" ColSpanLg="6" BeginRow="true">
                    <DxSpinEdit @bind-Value="@targetConditionAction.Sequence" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                @if (targetConditionAction?.GetType() == typeof(AwaitAction))
                {
                    AwaitAction awaitAction = targetConditionAction as AwaitAction;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["await time"]}")" ColSpanLg="6" BeginRow="true">
                        <DxSpinEdit @bind-Value="@awaitAction.DelayMillisecond" />
                    </DxFormLayoutItem>
                }
                else if (targetConditionAction?.GetType() == typeof(SetTagAction))
                {
                    SetTagAction setTagAction = targetConditionAction as SetTagAction;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target Machine"]}")" ColSpanLg="6" BeginRow="true">
                        <DxComboBox @bind-Value="@setTagAction.TargetMachineId" Data="@machines" ValueFieldName="@nameof(Machine.Id)" TextFieldName="@nameof(Machine.Name)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target Tag"]}")" ColSpanLg="6" BeginRow="true">
                        <DxComboBox @bind-Value="@setTagAction.TargetTagId" Data="@machineService.GetMachineByID(setTagAction?.TargetMachineId)?.TagCategory?.Tags" ValueFieldName="@nameof(Tag.Id)" TextFieldName="@nameof(Tag.Name)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Value string"]}")" ColSpanLg="6" BeginRow="true">
                        <DxTextBox @bind-Text="@setTagAction.ValueString" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }

                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

@code {

    IGrid? conditionGrid { get; set; }
    private List<Condition> allConditions = new();
    private Condition? targetCondition;
    private bool conditionSelected => targetCondition is not null;


    IGrid? conditionNodeGrid { get; set; }
    DxTreeList? treeView { get; set; }
    private List<ConditionNode> hierarchicalConditionNodes => conditionSelected ? targetCondition?.ConditionNodes.ToList() : new();
    private IEnumerable<ConditionNode>? flatConditionNodes;
    private ConditionNode? targetConditionNode;
    private bool conditionNodeSelected => targetConditionNode is not null;



    IGrid? actionGrid { get; set; }
    private ConditionAction? targetConditionAction;
    private bool conditionActionSelected => targetConditionAction is not null;
    private List<ConditionAction> conditionActions => conditionSelected ? targetCondition.ConditionActions.ToList() : new();


    private bool conditionPopupVisible;
    private bool conditionNodePopupVisible;
    private bool conditionActionPopupVisible;

    private List<Machine> machines = new();

    protected override async Task OnInitializedAsync()
    {
        await InitParam();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        foreach (var c in allConditions)
        {
            c.UIUpdateAct -= UIUpdate;
        }
    }

    private async void UIUpdate()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task InitParam()
    {
        allConditions = await machineService.GetAllConditionsConfig();

        // foreach (var c in allConditions)
        // {
        //     c.UIUpdateAct += UIUpdate;
        // }

        machines = machineService.Machines.Where(x => x.hasTags).ToList();

        //return Task.CompletedTask;

    }

    private void ShowConditionPopup()
    {
        conditionPopupVisible = true;

    }
    private async Task CloseConditionPopup()
    {
        conditionPopupVisible = false;
        await InitParam();
    }

    private async Task ShowNodePopup()
    {
        if (conditionSelected)
        {
            flatConditionNodes = await machineService.GetConditionNodesFlatById(targetCondition.Id);
        }
        conditionNodePopupVisible = true;
    }

    private async Task CloseNodePopup()
    {
        conditionNodePopupVisible = false;
        await InitParam();
    }

    private void ShowActionPopup()
    {
        conditionActionPopupVisible = true;

    }

    private async Task CloseActionPopup()
    {
        conditionActionPopupVisible = false;
        await InitParam();
    }





    private void ConditionSelected(GridFocusedRowChangedEventArgs args)
    {
        targetCondition = args.DataItem as Condition;
    }

    private void NewConditionClicked()
    {
        targetCondition = new();
        ShowConditionPopup();
    }

    private async Task UpsertCondition()
    {
        await machineService.UpsertCondition(targetCondition);
        await CloseConditionPopup();

    }

    private void ShowConditionDelete()
    {
        conditionGrid?.ShowDataItemDeleteConfirmation(targetCondition);
    }

    private async Task DeleteCondition()
    {
        await machineService.DeleteCondition(targetCondition);
        await InitParam();
    }



    private void ConditionNodeSelected(TreeListFocusedRowChangedEventArgs e)
    {
        targetConditionNode = e.DataItem as ConditionNode;
    }

    private async Task NewConditionNodeClicked(int i)
    {
        targetConditionNode = i switch
        {
            0 => new ConditionLogicNode(targetCondition.Id),
            1 => new ConditionConstDataNode(targetCondition.Id),
            2 => new ConditionTagDataNode(targetCondition.Id),
            _ => null,
        };
        if (targetConditionNode is not null)
        {
            await ShowNodePopup();
        }
    }

    private async Task UpsertConditionNode()
    {
        //var type = targetConditionNode.GetType();
        var res = await machineService.UpsertConditionNodeTPC(targetConditionNode);
        await CloseNodePopup();

    }

    private void ShowConditionNodeDelete()
    {
        conditionNodeGrid?.ShowDataItemDeleteConfirmation(targetConditionNode);
    }

    private async Task DeleteConditionNode()
    {
        await machineService.DeleteConditionNodeTCP(targetConditionNode);
        await InitParam();
    }




    private void ConditionActionSelected(GridFocusedRowChangedEventArgs args)
    {
        targetConditionAction = args.DataItem as ConditionAction;
    }

    private void NewConditionActionClicked(int i)
    {
        targetConditionAction = i switch
        {
            0 => new AwaitAction(targetCondition.Id),
            1 => new SetTagAction(targetCondition.Id),
            _ => null,
        };
        if (targetConditionAction is not null)
        {
            ShowActionPopup();
        }
    }

    private async Task UpsertConditionAction()
    {
        await machineService.UpsertConditionActionTPC(targetConditionAction);
        await CloseActionPopup();

    }

    private void ShowConditionActionDelete()
    {
        actionGrid?.ShowDataItemDeleteConfirmation(targetConditionAction);
    }



    private async Task DeleteConditionAction()
    {
        await machineService.DeleteConditionActionTPC(targetConditionAction);
        await InitParam();
    }
}