@namespace CommonLibraryP.MachinePKG.Component
@rendermode RenderMode.InteractiveServer

@inject IStringLocalizer<MachineLanguage> localizer

@inject MachineService machineService
@inject NotificationService notificationService



<DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
    <Rows>
        <DxGridLayoutRow></DxGridLayoutRow>
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="3fr"></DxGridLayoutColumn>
        <DxGridLayoutColumn Width="8fr"></DxGridLayoutColumn>
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div>
                    <DxGrid @ref="@catGrid" @bind-SelectedDataItem="@targetCatObj" AllowSelectRowByClick="true" SelectionMode="GridSelectionMode.Single" Data="@tagCategories" DataItemDeleting="DeleteTagCategory" HighlightRowOnHover="true">
                        <ToolbarTemplate>
                            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <Items>
                                    <DxToolbarItem IconCssClass="oi oi-plus" Click="NewCatClicked" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-pencil" Click="ShowCatPopup" Enabled="@catSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-trash" Click="ShowCatDelete" Enabled="@catSelected" RenderStyle="ButtonRenderStyle.Danger" Alignment="ToolbarItemAlignment.Right" BeginGroup="true" />
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn Caption="@($"{localizer["Name"]}")" FieldName="@nameof(TagCategory.Name)"></DxGridDataColumn>
                            <DxGridDataColumn Caption="@($"{localizer["Connection Type"]}")" FieldName="@nameof(TagCategory.ConnectionType)">
                                <CellDisplayTemplate>
                                    <div>@(MachineTypeEnumHelper.GetConnectionTypeWrapperClassByIndex((int)context.Value)?.DisplayName)</div>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                            <DxGridDataColumn Caption="@($"{localizer["Tag Count"]}")" FieldName="@nameof(TagCategory.TagCount)"></DxGridDataColumn>
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="0" Column="1">
            <Template>
                <div>
                    <DxGrid @ref="@tagGrid" Data="@tags" DataItemDeleting="DeleteTag" @bind-SelectedDataItem="@targetTagObj" AllowSelectRowByClick="true" SelectionMode="GridSelectionMode.Single" HighlightRowOnHover="true" DetailRowDisplayMode="@gridDetailRowDisplayMode">
                        <ToolbarTemplate>
                            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <Items>
                                    <DxToolbarItem IconCssClass="oi oi-plus" Click="NewTagClicked" Enabled="@catSelected" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-pencil" Click="ShowTagPopup" Enabled="@tagSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-trash" Click="ShowTagDelete" Enabled="@tagSelected" RenderStyle="ButtonRenderStyle.Danger" Alignment="ToolbarItemAlignment.Right" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-eye" Click="SwitchTagDetailVisible" Enabled="@catSelected" RenderStyle="@detailStyle" BeginGroup="true" />
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn Caption="@($"{localizer["Name"]}")" FieldName="@nameof(Tag.Name)"></DxGridDataColumn>
                            <DxGridDataColumn Caption="@($"{localizer["Data Type"]}")" FieldName="@nameof(Tag.DataType)">
                                <CellDisplayTemplate>
                                    <div>@((DataType)((int)context.Value))</div>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                            <DxGridDataColumn Caption="@($"{localizer["Update By Time"]}")" FieldName="@nameof(Tag.UpdateByTime)">
                                <CellDisplayTemplate>
                                    <DxCheckBox CheckType="CheckType.Switch" ReadOnly="true" Checked="@((bool)context.Value)" />
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                        </Columns>
                        <DetailRowTemplate>
                            @{
                                switch (context.DataItem)
                                {
                                    case ModbusTCPTag modbusTCPTag:
                                        <ModbusTCPTagDetail ModbusTCPTagParam="@modbusTCPTag" />
                                        break;
                                    default:
                                        break;
                                }
                            }
                        </DetailRowTemplate>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

<DxPopup @bind-Visible="@catPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseCatPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetCat" Context="EditFormContext" OnValidSubmit="UpsertTagCategory">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetCat.Name" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Connection Type"]}")" ColSpanLg="6">
                    <DxComboBox Data="@ConnectTypes" @bind-Value="@targetCat.ConnectionType" ValueFieldName="@(nameof(ConnectionTypeWrapperClass.Index))" TextFieldName="@(nameof(ConnectionTypeWrapperClass.DisplayName))" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@tagPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseTagPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetTag" Context="EditFormContext" OnValidSubmit="UpsertTag">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="4" BeginRow="true">
                    <DxTextBox @bind-Text="@targetTag.Name" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Data Type"]}")" ColSpanLg="4">
                    <DxComboBox Data="@DataTypes" @bind-Value="@targetTag.DataType" ValueFieldName="@(nameof(DataTypeWrapperClass.Index))" TextFieldName="@(nameof(DataTypeWrapperClass.DisplayName))"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Update By Time"]}")" ColSpanLg="4">
                    <DxCheckBox @bind-Checked="@targetTag.UpdateByTime" CheckType="CheckType.Switch" />
                </DxFormLayoutItem>
                @*<DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Special Type"]}")" ColSpanLg="3">
                    <DxComboBox @bind-Value="@targetTag.SpecialType" Data="@SpecialTagTypes" ValueFieldName="@(nameof(SpecialTagTypeWrapperClass.Index))" TextFieldName="@(nameof(SpecialTagTypeWrapperClass.DisplayName))" />
                </DxFormLayoutItem> *@
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                @switch (targetTag)
                {
                    case ModbusTCPTag modbusTCPTag:
                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Station"]}")" BeginRow="true">
                            <DxSpinEdit @bind-Value="@modbusTCPTag.Station" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Input/Output"]}")" BeginRow="true">
                            <DxCheckBox @bind-Checked="@modbusTCPTag.InputOrOutput" CheckType="CheckType.Switch" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Start Index"]}")" ColSpanLg="6" BeginRow="true">
                            <DxSpinEdit @bind-Value="@modbusTCPTag.StartIndex" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Offset"]}")" ColSpanLg="6">
                            <DxSpinEdit @bind-Value="@modbusTCPTag.Offset" ReadOnly=@(!modbusTCPTag.OffsetEditable) MinValue="@(modbusTCPTag.OffsetMinValue)" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["String Reverse"]}")" ColSpanLg="2" BeginRow="true">
                            <DxCheckBox @bind-Checked="@modbusTCPTag.StringReverse" ReadOnly=@(!modbusTCPTag.IsString) CheckType="CheckType.Switch" />
                        </DxFormLayoutItem>
                        break;
                    default:
                        break;
                }
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <Template>
                        <DxToolbar>
                            <Items>
                                <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                            </Items>
                        </DxToolbar>
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>


@code {

    IGrid? catGrid { get; set; }
    private IEnumerable<TagCategory>? tagCategories;
    private Object? targetCatObj;
    //private bool targetCatObjSelected => targetCatObj is not null;
    private TagCategory? targetCat => targetCatObj as TagCategory;
    private bool catSelected => targetCat != null;


    IGrid? tagGrid { get; set; }
    private List<Tag> tags => catSelected ? targetCat.Tags.ToList() : new();
    private Object? targetTagObj;
    private Tag? targetTag => targetTagObj as Tag;
    private bool tagSelected => targetTag != null;


    private bool catPopupVisible;
    private bool tagPopupVisible;


    private IEnumerable<ConnectionTypeWrapperClass> ConnectTypes => MachineTypeEnumHelper.GetConnectionTypeWrapperClasses();
    private IEnumerable<DataTypeWrapperClass> DataTypes => MachineTypeEnumHelper.GetDataTypesWrapperClass();

    private bool showTagDetails = false;
    private ButtonRenderStyle detailStyle => showTagDetails ? ButtonRenderStyle.Info : ButtonRenderStyle.Secondary;
    private GridDetailRowDisplayMode gridDetailRowDisplayMode => showTagDetails ? GridDetailRowDisplayMode.Always : GridDetailRowDisplayMode.Never;

    protected override async Task OnInitializedAsync()
    {
        await InitParameter();
        await base.OnInitializedAsync();
    }

    private async Task InitParameter()
    {
        tagCategories = await machineService.GetAllTagCategoriesWithTags();
        targetCatObj = tagCategories.FirstOrDefault();
        targetTagObj = tags.FirstOrDefault();
    }
    #region localization

    // private string GetLocalization(string s)
    // {
    //     return targetCat is null ? string.Empty : localizer[MachineTypeEnumHelper.GetTagParameterMeaning((ConnectType)targetCat?.ConnectionType, s)];
    // }

    // private bool GetVariableDefined(string s)
    // {
    //     return targetCat is null ? false : MachineTypeEnumHelper.GetTagParameterMeaning((ConnectType)targetCat.ConnectionType, s) != "Not Defined";
    // }

    #endregion
    #region UI
    // private void CatSelected(GridFocusedRowChangedEventArgs args)
    // {
    //     targetCat = args.DataItem as TagCategory;
    // }

    // private void TagSelected(GridFocusedRowChangedEventArgs args)
    // {
    //     targetTag = args.DataItem as Tag;
    // }

    private void ShowCatPopup()
    {
        catPopupVisible = true;
    }

    private async void CloseCatPopup()
    {
        catPopupVisible = false;
        await InitParameter();
    }


    private void NewCatClicked()
    {
        GenrateNewCat();
        ShowCatPopup();
    }

    private void NewTagClicked()
    {
        GenrateNewTag();
        ShowTagPopup();
    }

    private void ShowCatDelete()
    {
        catGrid?.ShowDataItemDeleteConfirmation(targetCat);
    }

    private void ShowTagDelete()
    {
        tagGrid?.ShowDataItemDeleteConfirmation(tagSelected);
    }

    private void ShowTagPopup()
    {
        tagPopupVisible = true;
    }

    private void SwitchTagDetailVisible()
    {
        showTagDetails = !showTagDetails;
    }

    private async void CloseTagPopup()
    {
        tagPopupVisible = false;
        await InitParameter();
    }


    #endregion


    #region category

    private void GenrateNewCat()
    {
        targetCatObj = new TagCategory(Guid.NewGuid());
    }

    private async Task UpsertTagCategory()
    {
        var res = await machineService.UpsertTagCategory(targetCat);
        CloseCatPopup();
        notificationService.ShowToast(res);
        //uiService.ShowToast(res);
    }



    private async Task DeleteTagCategory()
    {
        var res = await machineService.DeleteTagCategory(targetCat);
        await InitParameter();
        notificationService.ShowToast(res);
        //await ActionCallback.InvokeAsync(res);
        //uiService.ShowToast(res);
    }



    #endregion

    #region tag

    private void GenrateNewTag()
    {
        switch (targetCat?.ConnectionType)
        {
            case 0:
            case 1:
                targetTagObj = new ModbusTCPTag(targetCat.Id);
                break;
            default:
                targetTagObj = new ModbusTCPTag(targetCat.Id);
                break;
        }
    }

    private async Task UpsertTag()
    {
        var res = await machineService.UpsertTagTPC(targetTag);
        await InitParameter();
        CloseTagPopup();
        notificationService.ShowToast(res);
        //await ActionCallback.InvokeAsync(res);
    }



    private async Task DeleteTag()
    {
        var res = await machineService.DeleteTagTCP(targetTag);
        await InitParameter();
        notificationService.ShowToast(res);
        //await ActionCallback.InvokeAsync(res);
        //uiService.ShowToast(res);
    }

    #endregion
}

