@namespace CommonLibraryP.MapPKG.Component
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using CommonLibraryP.MachinePKG
@using CommonLibraryP.ShopfloorPKG
@using Blazor.Diagrams
@using Blazor.Diagrams.Components

@rendermode RenderMode.InteractiveServer
@inject MapService mapService
@inject NotificationService notificationService
@inject IJSRuntime js


<head>
    <link href="_content/Z.Blazor.Diagrams/style.min.css" rel="stylesheet" />
    <link href="_content/Z.Blazor.Diagrams/default.styles.min.css" rel="stylesheet" />
</head>
<body>
    <script src="_content/Z.Blazor.Diagrams/script.min.js"></script>
</body>

<style>
    .diagram-container {
    width: 100%;
    height: 100%;
    border: 1px solid white;
    overflow: hidden;
    }

    .img {
    cursor: auto;
    overflow: auto;
    }
</style>

<script>
    function GetPosition(element) {
    const rect = element.getBoundingClientRect();
    return {
    x: rect.x,
    y:rect.y,
    top: rect.top,
    left: rect.left,
    height: rect.height,
    width: rect.width,
    };
    }
</script>



<DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
    <Rows>
        <DxGridLayoutRow Height="1fr" />
        <DxGridLayoutRow Height="10fr" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="3fr" />
        <DxGridLayoutColumn Width="8fr" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0" RowSpan="2">
            <Template>
                <div class="p-3">
                    <DxGrid @ref="@mapGrid" Data="@mapConfigs" SelectedDataItem="@taregtMapConfigObj" SelectedDataItemChanged="DataItemSelected" AllowSelectRowByClick="true" SelectionMode="GridSelectionMode.Single" HighlightRowOnHover="true" DataItemDeleting="DeleteMap">
                        <ToolbarTemplate>
                            <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <DxToolbarItem IconCssClass="oi oi-plus" Click="NewMap" BeginGroup="true" />
                                <DxToolbarItem IconCssClass="oi oi-pencil" Enabled="mapSelected" Click="ShowMapPopup" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                <DxToolbarItem IconCssClass="oi oi-trash" Enabled="mapSelected" Click="ShowMapDelete" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn FieldName="@nameof(MapConfig.Name)" />
                            <DxGridDataColumn FieldName="@nameof(MapConfig.ImageName)" />
                            <DxGridDataColumn FieldName="@nameof(MapConfig.ImageType)" />
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="0" Column="1">
            <Template>
                <div class="h-100 d-flex flex-wrap justify-content-evenly p-3 card">
                    <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-plus" BeginGroup="true">
                                <Items>
                                    <DxToolbarItem Text="Machine" Click="NewMapComponentMachine" />
                                    <DxToolbarItem Text="Station" Click="NewMapComponentStation" BeginGroup="true" />
                                </Items>
                            </DxToolbarItem>
                            @*                             <DxToolbarItem RenderStyle="ButtonRenderStyle.Secondary" Text="@($"{componentEditMode.ToString()}({mouseEventArgs?.ClientX}, {mouseEventArgs?.ClientY})")" Enabled="false" BeginGroup="true" />*@                            <DxToolbarItem RenderStyle="ButtonRenderStyle.Danger" IconCssClass="oi oi-trash" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                        </Items>
                    </DxToolbar>
                </div>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="1" Column="1" CssClass="img">
            <Template>
                @if (mapSelected)
                {
                    @* <div @ref="shapeLayer" class="h-100 w-100 card p-3"
                         style="background-image: url('@($"{imageDisplayByteString}")'); background-size:contain; background-position:center ;background-repeat: no-repeat"
                         @ondrop="OnDrop" ondragover="event.preventDefault();">
                        @foreach (var component in mapComponents)
                        {
                            <MapComponentEdit MapComponentParam="@component"
                                              ComponentClickCallback="ComponentClick" IsFocus=@(CheckIsFocus(component.Id))
                                              ComponentMouseEventStartArgsCallback="StartAction" />
                        }
                    </div> *@
                    <div class="diagram-container" style=@($"background-image: url('{imageDisplayByteString}'); background-size:contain; background-position:center ;background-repeat: no-repeat")>
                        <CascadingValue Value="Diagram">
                            <DiagramCanvas>

                            </DiagramCanvas>
                        </CascadingValue>
                    </div>
                }
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

<DxPopup @bind-Visible="@mapPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseMapPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetMapConfig" Context="EditFormContext" OnValidSubmit="UpsertMap">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Map Name" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetMapConfig.Name" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Image Name" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetMapConfig.ImageName" ShowValidationIcon="true" Enabled="false" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Image Type" ColSpanLg="6">
                    <DxTextBox @bind-Text="@targetMapConfig.ImageType" Enabled="false" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12" BeginRow="true">
                    <DxFileInput FilesUploading="OnFilesUploading"
                    AllowMultiFileUpload="false"
                    MaxFileSize="15000000"
                    AcceptedFileTypes="AllowedFileExtensions">
                    </DxFileInput>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@mapComponentPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseComponentPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">

        <EditForm Model="@targetMapComponent" Context="EditFormContext" OnValidSubmit="UpsertComponent" On>
            <DataAnnotationsValidator />
            <DxFormLayout>
                @if (targetMapComponent is MapComponentMachine mapComponentMachine)
                {
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Target machine" ColSpanLg="6" BeginRow="true">
                        <DxComboBox Data="@machines" @bind-Value="@mapComponentMachine.MachineId" TextFieldName="@nameof(Machine.Name)" ValueFieldName="@nameof(Machine.Id)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }
                else if (targetMapComponent is MapComponentStation mapComponentStation)
                {
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Target station" ColSpanLg="6" BeginRow="true">
                        <DxComboBox Data="@stations" @bind-Value="@mapComponentStation.StationId" TextFieldName="@nameof(Station.Name)" ValueFieldName="@nameof(Station.Id)" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Position X" ColSpanLg="6" BeginRow="true">
                    <DxSpinEdit @bind-Value="@targetMapComponent.PositionX" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Position Y" ColSpanLg="6">
                    <DxSpinEdit @bind-Value="@targetMapComponent.PositionY" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Height" ColSpanLg="6">
                    <DxSpinEdit @bind-Value="@targetMapComponent.Height" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Width" ColSpanLg="6">
                    <DxSpinEdit @bind-Value="@targetMapComponent.Width" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

@code {
    #region map

    IGrid? mapGrid { get; set; }
    private IEnumerable<MapConfig>? mapConfigs;
    private Object? taregtMapConfigObj;
    private MapConfig? targetMapConfig => taregtMapConfigObj as MapConfig;
    private bool mapSelected => targetMapConfig is not null;
    private bool mapPopupVisible = false;


    private readonly List<string> AllowedFileExtensions = new() { ".jpg", ".jpeg", ".png" };

    private string imageDisplayByteString => GetImageDisplayByteString();

    private string GetImageDisplayByteString()
    {
        try
        {
            return mapSelected ? $"data:{targetMapConfig?.ImageType.ToString()};base64,{Convert.ToBase64String(targetMapConfig.ImageByte)}" : string.Empty;
        }
        catch
        {
            return string.Empty;
        }
    }

    #endregion

    #region components
    private IEnumerable<MapComponent>? mapComponents => mapSelected ? targetMapConfig?.MapComponents : new List<MapComponent>();
    private MapComponent? targetMapComponent;
    private bool mapComponentSelected => targetMapComponent is not null;
    private bool mapComponentPopupVisible = false;

    private IEnumerable<Station> stations;
    private IEnumerable<Machine> machines;

    private BlazorDiagram Diagram { get; set; } = null!;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await InitParam();
        await InitDiagram();
    }

    private async Task InitDiagram()
    {
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = false,
                Zoom =
            {
                Enabled = false,
            },
                AllowPanning = false,
                Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
            };

        Diagram = new BlazorDiagram(options);
        Diagram.RegisterComponent<MapDiagramNode, MapDiagramNodeComponent>();
    }

    private async Task InitParam()
    {
        mapConfigs = await mapService.GetAllMapsConfig();
        stations = await mapService.GetStationsFromMchineService();
        machines = await mapService.GetMachinesFromMchineService();
    }

    #region map

    private void ShowMapPopup() => mapPopupVisible = true;
    private async Task CloseMapPopup()
    {
        mapPopupVisible = false;
        await Task.Delay(1);
        taregtMapConfigObj = null;
        await InitParam();
    }

    private void NewMap()
    {
        taregtMapConfigObj = new MapConfig { ImageType = string.Empty };
        ShowMapPopup();
    }

    private async Task UpsertMap()
    {
        var res = await mapService.UpsertMapConfig(targetMapConfig);
        await CloseMapPopup();
        notificationService.ShowToast(res);
    }

    private void ShowMapDelete()
    {
        mapGrid?.ShowDataItemDeleteConfirmation(targetMapConfig);
    }

    private async Task DeleteMap()
    {
        var res = await mapService.DeleteMapConfig(targetMapConfig);
        await CloseMapPopup();
        notificationService.ShowToast(res);
    }

    private async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        var file = args.Files[0];

        targetMapConfig.ImageType = file.Type;
        targetMapConfig.ImageName = file.Name;

        int fileSize = (int)file.Size;
        targetMapConfig.ImageByte = new byte[fileSize];

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);
                targetMapConfig.ImageByte = memoryStream.ToArray();
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {

        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    #region component

    private async Task DataItemSelected(Object? obj)
    {
        taregtMapConfigObj = obj;
        Diagram.Nodes.Clear();
        foreach (var node in mapComponents)
        {
            Diagram.Nodes.Add((new MapDiagramNode(position: new Point(node.PositionX, node.PositionY))).SetConfig(node));
        }

        await Task.CompletedTask;
    }

    private void ShowComponentPopup() => mapComponentPopupVisible = true;
    private async Task CloseComponentPopup()
    {
        mapComponentPopupVisible = false;
        await InitParam();
    }

    private void NewMapComponentStation()
    {
        targetMapComponent = new MapComponentStation { MapId = targetMapConfig.Id };
        ShowComponentPopup();
    }

    private void NewMapComponentMachine()
    {
        targetMapComponent = new MapComponentMachine { MapId = targetMapConfig.Id };
        ShowComponentPopup();
    }

    private async Task UpsertComponent()
    {
        var res = await mapService.UpsertMapComponentTPC(targetMapComponent);
        await CloseComponentPopup();
        notificationService.ShowToast(res);
    }

    // private async Task ComponentClick(Guid id)
    // {
    //     targetMapComponent = mapComponents?.FirstOrDefault(x => x.Id == id);
    //     await InvokeAsync(StateHasChanged);
    // }

    // private bool CheckIsFocus(Guid id)
    // {
    //     return mapComponentSelected ? targetMapComponent.Id == id : false;
    // }

    // private async Task StartAction(MapComponentEditMode mapComponentEditMode, MouseEventArgs e)
    // {
    //     mouseEventArgs = e;
    //     componentEditMode = mapComponentEditMode;
    //     await InvokeAsync(StateHasChanged);
    // }

    // private async Task OnDrop(MouseEventArgs e)
    // {
    //     if (mapComponentSelected)
    //     {
    //         shapePanelSize = await js.InvokeAsync<Rect>("GetPosition", shapeLayer);

    //         switch (componentEditMode)
    //         {
    //             case MapComponentEditMode.Move:
    //                 targetMapComponent.PositionX = (e.ClientX - mouseEventArgs.OffsetX - shapePanelSize.Left) / shapePanelSize.Width * 100;
    //                 //targetMapComponent.PositionX += (deltaX / 100);
    //                 targetMapComponent.PositionY = (e.ClientY - mouseEventArgs.OffsetY - shapePanelSize.Top) / shapePanelSize.Height * 100;
    //                 //targetMapComponent.PositionY += (deltaY / 100);
    //                 break;
    //             case MapComponentEditMode.ResizeCorner:
    //                 targetMapComponent.Width = (e.ClientX - shapePanelSize.Left) / shapePanelSize.Width * 100 - targetMapComponent.PositionX;
    //                 targetMapComponent.Height = (e.ClientY - shapePanelSize.Top) / shapePanelSize.Height * 100 - targetMapComponent.PositionY;
    //                 break;
    //             default:
    //                 break;
    //         }
    //         componentEditMode = MapComponentEditMode.None;
    //         await InvokeAsync(StateHasChanged);
    //     }
    // }

    public class Rect
    {
        public double x { get; set; }
        public double y { get; set; }
        public double Top { get; set; }
        public double Left { get; set; }
        public double Height { get; set; }
        public double Width { get; set; }
    }

    #endregion
}
