@namespace CommonLibraryP.ShopfloorPKG.Component

@rendermode RenderMode.InteractiveServer
@inject IStringLocalizer<ShopfloorLanguage> localizer
@inject ShopfloorService shopfloorService
@inject NotificationService notificationService
@implements IDisposable

<style>
    .stationheight-s {
    height: 30rem;
    }

    .stationheight-l {
    height: 40rem;
    }

    .stationwide-s {
    width: 20rem;
    }

    .stationwide-l {
    width: 40rem;
    }

</style>

@if (hasStation)
{
    <DxPopup HeaderText="Error Message" @bind-Visible="@showErrorMsg" CloseOnOutsideClick="false" />

    <div class="card shadow p-3 @sizeCss" style="border-color:@(statusDetail?.ColorRGBString)">
        <DxGridLayout RowSpacing="1rem">
            <Rows>
                <DxGridLayoutRow Areas="title" Height="1fr" />
                <DxGridLayoutRow Areas="workorderinfo" Height="@($"{workorderAreaFrame}fr")" />
                <DxGridLayoutRow Areas="itemandtaskinfo" Height="@($"{itemAndTaskAreaFrame}fr")" />
                <DxGridLayoutRow Areas="actionbtn" Height="1fr" />
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="12fr" />
            </Columns>
            <Items>
                <DxGridLayoutItem Area="title">
                    <Template>
                        <div class="w-100 h-100 d-flex flex-wrap justify-content-around align-items-center">
                            <DxButtonGroup RenderStyle="@statusBtnStyle" RenderStyleMode="@ButtonRenderStyleMode.Outline" Enabled="false" SizeMode="SizeMode.Large">
                                <Items>
                                    <DxButtonGroupItem Text="@($"{StationParam?.Process?.Name}-{StationParam?.Name}")" />
                                    <DxButtonGroupItem Text="@($"{localizer[CommonEnumHelper.GetStatusDetail(StationParam.StationStatusCode).DisplayName]}")" />
                                </Items>
                            </DxButtonGroup>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="workorderinfo">
                    <Template>
                        <div>
                            @WorkorderInfoArea
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="itemandtaskinfo">
                    <Template>
                        <div>
                            @ItemAndTaskInfoArea
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="actionbtn">
                    <Template>
                        <div class="w-100 h-100 d-flex flex-wrap justify-content-around align-items-center">
                            <DxButton Visible="@canrun" Click="RunStation" IconCssClass="oi oi-media-play" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Click="@ShowOperationPopup" IconCssClass="oi oi-clipboard" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
    </div>

    <DxPopup @bind-Visible="@showOperation" CloseOnOutsideClick="false">
        <HeaderTemplate>
            <div class="w-100 p-3 border border-bottom">
                <DxToolbar Title="@StationParam?.Name">
                    <Items>
                        <DxToolbarItem IconCssClass="oi oi-x" Click="CloseOperationPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                    </Items>
                </DxToolbar>
            </div>
        </HeaderTemplate>
        <BodyContentTemplate>
            <DxTabs>
                <DxTabPage Text="@($"{localizer["Workorder Deploy"]}")" Visible="@StationParam.CanDeployWorkorder">
                    <div class="p-3">
                        @WorkorderDeployInfo
                    </div>
                </DxTabPage>
                <DxTabPage Text="@($"{localizer["Station In"]}")" Visible="@StationParam.CanStationIn">
                    <div class="p-3">
                        @StationInInfo
                    </div>
                </DxTabPage>
                <DxTabPage Text="@($"{localizer["Station Out"]}")" Visible="@StationParam.CanStationOut">
                    <div class="p-3">
                        @StationOutInfo
                    </div>
                </DxTabPage>
                <DxTabPage Text="@($"{localizer["Item Record"]}")" Visible="@StationParam.CanStationOut"></DxTabPage>
            </DxTabs>
        </BodyContentTemplate>
    </DxPopup>
}

@code {
    [Parameter]
    public Station? StationParam { get; set; }
    protected bool hasStation => StationParam != null;

    private StatusDetailWrapperClass statusDetail => CommonEnumHelper.GetStatusDetail((int)(StationParam?.StationStatusCode));

    private ButtonRenderStyle statusBtnStyle
        => statusDetail is null ? ButtonRenderStyle.None : statusDetail.buttonRenderStyle;


    private RenderFragment? WorkorderInfoArea => StationParam.IsSingleWorkorder ?
    @<WorkorderInfo_SingleWorkorder StationParamFromRoot="@StationParam"/> : null;


    private RenderFragment? ItemAndTaskInfoArea => StationParam?.StationType switch
    {
        111 => @<ItemAndTaskInfo_SingleWorkorderSingleItemWithSerialNo StationParamFromRoot="@StationParam" /> ,
        _ => null,
    };

    private RenderFragment? WorkorderDeployInfo => StationParam.IsSingleWorkorder ?
    @<DeployWorkorderInfo_SingleWorkorder StationParamFromRoot="@StationParam" WorkorderIdModelCallback="DeployWorkorder" /> : null;

    private RenderFragment? StationInInfo => StationParam.IsSingleItem ?
    @<StationInInfo_SingleWorkorderWithSerialNo StationInCallback="StationInWithSerialNo" />: null;

    private RenderFragment? StationOutInfo => StationParam.IsSingleItem ?
    @<StationOutInfo_SingleWorkorderWithSerialNo StationOutCallback="StationOutWithSerialNo" />: null;

    private RenderFragment? ItemRecordInfo;

    public bool showErrorMsg = false;

    private string sizeCss => StationParam.IsSingleItem ? "stationheight-s stationwide-s" : "stationheight-l stationwide-l";
    private int workorderAreaFrame => StationParam.IsSingleWorkorder ? 1 : 2;
    private int itemAndTaskAreaFrame => StationParam.IsSingleItem ? 3 : 2;


    private bool showOperation = false;
    private void ShowOperationPopup()
    => showOperation = true;
    private void CloseOperationPopup()
    => showOperation = false;

    protected bool canedit => hasStation ? StationParam.StationStatusCode is 0 : false;
    protected bool canrun => hasStation ? StationParam.Canrun : false;
    protected bool canoperate => hasStation ? StationParam.StationStatusCode is 5 : false;
    protected bool canpause => hasStation ? StationParam.StationStatusCode is 5 : false;
    protected bool canstop => hasStation ? StationParam.StationStatusCode is 5 : false;
    protected bool iserror => hasStation ? StationParam.StationStatusCode is 8 : false;

    protected override Task OnInitializedAsync()
    {
        if (hasStation)
        {
            StationParam.UIUpdateAct += UpdateUIFromStation;
        }
        return base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        if (hasStation)
        {
            StationParam.UIUpdateAct += UpdateUIFromStation;
        }
    }

    private async Task UpdateUIFromStation()
    {
        await InvokeAsync(StateHasChanged);
    }


    #region deploy workorder

    private async Task DeployWorkorder(WorkorderIdModel workorderIdModel)
    {
        var res = await shopfloorService.DeployWorkorderToStation(StationParam.Id, workorderIdModel);
        CloseOperationPopup();
        notificationService.ShowToast(res);
    }

    #endregion

    #region start running

    private async Task RunStation()
    {
        var res = await shopfloorService.RunStation(StationParam.Id);
        notificationService.ShowToast(res);
    }

    #endregion

    #region station in

    private async Task StationInWithSerialNo(string serialNo)
    {
        var res = await shopfloorService.StationInByNameAndSerialNo(StationParam?.Name, serialNo);
        CloseOperationPopup();
        notificationService.ShowToast(res);
    }

    #endregion

    #region station out

    private async Task StationOutWithSerialNo(bool pass)
    {
        var res = await shopfloorService.StationOutByFIFO(StationParam?.Name, pass);
        CloseOperationPopup();
        notificationService.ShowToast(res);
    }

    #endregion
}

